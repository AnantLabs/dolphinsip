/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. compiler.jj */
/*@egen*/options{  JAVA_UNICODE_ESCAPE = true;  ERROR_REPORTING = false;  STATIC = false;}PARSER_BEGIN(RuleCompiler)package by.bsu.fami.etl.compiler.jcc;import java.io.*;import java.util.*;import org.apache.log4j.Logger;import by.bsu.fami.etl.compiler.bean.*;public class RuleCompiler/*@bgen(jjtree)*/implements RuleCompilerTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTRuleCompilerState jjtree = new JJTRuleCompilerState();

/*@egen*/  private final static Logger LOGGER = Logger.getLogger(RuleCompiler.class );  // Hastable for storing typedef typesprivate static Set types = new HashSet();  public static RuleCompiler compile(Reader input){    LOGGER.info("Create rule compiler for rule source file :"+input);    RuleCompiler c = new RuleCompiler(input);    return c;  }  // Returns true if the given string is// a typedef type.private static boolean isType(String type){    return types.contains(type);  }  public static void dump(SimpleNode e, String prefix){    LOGGER.debug(e.toString(prefix)+":"+e.jjtGetValue());    for (int i = 0;    i<e.jjtGetNumChildren();    ++i){      SimpleNode n = (SimpleNode)e.jjtGetChild(i);      if (n != null){        dump(n, prefix+"\t");      }    }  }}PARSER_END(RuleCompiler)/* WHITE SPACE */SKIP:{  " "  | "\t"  | "\n"  | "\r"  | "\r\n"  | "\f"}/* COMMENTS */MORE:{  "//":IN_SINGLE_LINE_COMMENT  | <"/**"~["/"]>{    input_stream.backup(1);  }  :IN_FORMAL_COMMENT  | "/*":IN_MULTI_LINE_COMMENT}<IN_SINGLE_LINE_COMMENT>SPECIAL_TOKEN:{  <SINGLE_LINE_COMMENT:"\n"  | "\r"  | "\r\n">:DEFAULT}<IN_FORMAL_COMMENT>SPECIAL_TOKEN:{  <FORMAL_COMMENT:"*/">:DEFAULT}<IN_MULTI_LINE_COMMENT>SPECIAL_TOKEN:{  <MULTI_LINE_COMMENT:"*/">:DEFAULT}<IN_SINGLE_LINE_COMMENT, IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT>MORE:{  <~[]>}TOKEN:{  <RULE:"rule">  | <WRITER:"writer">  | <TYPE:"type">  | <DS:"ds">  | <MAP:"map">  | <OUTPUTSCHEME:"outputscheme">  | <READER:"reader">  | <DATASOURCE:"datasource">  | <TRANSFORMER:"transformer">  | <CALL:"call">  | <PROPERTY:"property">  | <FIELD:"field">  | <ROOTID:"rootId">  | <FIELDID:"fieldId">  | <FIELDKEYS:"fieldKey">  | <FILTER:"filter">  | <CHECKER:"checker">  | <CONDITION:"condition">  | <TRANSACTIONTYPE:"transactiontype">  | <FUNCTION:"function">  | <VALUE:"value">  | <DOUBLE:"double">  | <SHORT:"short">  | <BYTE:"byte">  | <FLOAT:"float">  | <BOOLEAN:"boolean">  | <LONG:"long">  | <VOID:"void">  | <CHAR:"char">  | <INT:"int">}/* LITERALS */TOKEN:{  <INTEGER_LITERAL:<DECIMAL_LITERAL>(["l", "L"])?  | <HEX_LITERAL>(["l", "L"])?  | <OCTAL_LITERAL>(["l", "L"])?>  | <#DECIMAL_LITERAL:["1"-"9"](["0"-"9"])*>  | <#HEX_LITERAL:"0"["x", "X"](["0"-"9", "a"-"f", "A"-"F"])+>  | <#OCTAL_LITERAL:"0"(["0"-"7"])*>  | <FLOATING_POINT_LITERAL:(["0"-"9"])+"."(["0"-"9"])*(<EXPONENT>)?(["f", "F", "d", "D"])?  | "."(["0"-"9"])+(<EXPONENT>)?(["f", "F", "d", "D"])?  | (["0"-"9"])+<EXPONENT>(["f", "F", "d", "D"])?  | (["0"-"9"])+(<EXPONENT>)?["f", "F", "d", "D"]>  | <#EXPONENT:["e", "E"](["+", "-"])?(["0"-"9"])+>  | <CHARACTER_LITERAL:"'"((~["'", "\\", "\n", "\r"])  | ("\\"(["n", "t", "b", "r", "f", "\\", "'", "\""]  | ["0"-"7"](["0"-"7"])?  | ["0"-"3"]["0"-"7"]["0"-"7"])))"'">  | <STRING_LITERAL:"\""((~["\"", "\\", "\n", "\r"])  | ("\\"(["n", "t", "b", "r", "f", "\\", "'", "\""]  | ["0"-"7"](["0"-"7"])?  | ["0"-"3"]["0"-"7"]["0"-"7"])))*"\"">}/* IDENTIFIERS */TOKEN:{  <IDENTIFIER:<LETTER>(<LETTER>  | <DIGIT>)*>  | <#LETTER:["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>  | <#DIGIT:["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>}/* SEPARATORS */TOKEN:{  <LPAREN:"(">  | <RPAREN:")">  | <LBRACE:"{">  | <RBRACE:"}">  | <LBRACKET:"[">  | <RBRACKET:"]">  | <SEMICOLON:";">  | <COMMA:",">  | <DOT:".">  | <AT:"@">}/* OPERATORS */TOKEN:{  <ASSIGN:"=">  | <LT:"<">  | <BANG:"!">  | <TILDE:"~">  | <HOOK:"?">  | <COLON:":">  | <EQ:"==">  | <LE:"<=">  | <GE:">=">  | <NE:"!=">  | <SC_OR:"||">  | <SC_AND:"&&">  | <INCR:"++">  | <DECR:"--">  | <PLUS:"+">  | <MINUS:"-">  | <STAR:"*">  | <SLASH:"/">  | <BIT_AND:"&">  | <BIT_OR:"|">  | <XOR:"^">  | <REM:"%">  | <LSHIFT:"<<">  | <PLUSASSIGN:"+=">  | <MINUSASSIGN:"-=">  | <STARASSIGN:"*=">  | <SLASHASSIGN:"/=">  | <ANDASSIGN:"&=">  | <ORASSIGN:"|=">  | <XORASSIGN:"^=">  | <REMASSIGN:"%=">  | <LSHIFTASSIGN:"<<=">  | <RSIGNEDSHIFTASSIGN:">>=">  | <RUNSIGNEDSHIFTASSIGN:">>>=">  | <ELLIPSIS:"...">}SimpleNode Rule():{/*@bgen(jjtree) Rule */
  SimpleNode jjtn000 = new SimpleNode(JJTRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  SimpleNode property;  SimpleNode component;  SimpleNode checker;  SimpleNode dataSource;  Rule rule = new Rule();  Function fun;}{/*@bgen(jjtree) Rule */
  try {
/*@egen*/  <RULE>t = <IDENTIFIER><LBRACE>(property = Property(){    rule.getProperties().add((Property)property.jjtGetValue());  }  )*((component = Writer()  | component = Transformer()  | component = Filter()  | component = TransactonType()  | component = Reader()){    rule.getComponents().add((Component)component.jjtGetValue());  }  )*[checker = Checker(){    rule.setChecker((Checker)checker.jjtGetValue());  }  ]((dataSource = DataSource()){    rule.getDataSources().add((DataSource)dataSource.jjtGetValue());  }  )*((fun = MethodDeclaration()){    rule.getFunctions().add(fun);  }  )*<RBRACE>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{    rule.setName(t.image);    jjtn000.jjtSetValue(rule);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}SimpleNode Property():{/*@bgen(jjtree) Property */
  SimpleNode jjtn000 = new SimpleNode(JJTPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token name;  Token value;}{/*@bgen(jjtree) Property */
  try {
/*@egen*/  <PROPERTY>name = <IDENTIFIER><ASSIGN>value = <STRING_LITERAL><SEMICOLON>/*@bgen(jjtree)*/
                                                                          {
                                                                            jjtree.closeNodeScope(jjtn000, true);
                                                                            jjtc000 = false;
                                                                          }
/*@egen*/{    Property property = new Property();    property.setName(name.image);    property.setValue(value.image.replace("\"", ""));    jjtn000.jjtSetValue(property);    return jjtn000;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}SimpleNode Field():{/*@bgen(jjtree) Field */
  SimpleNode jjtn000 = new SimpleNode(JJTFIELD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token name;  Token type;  Token value;}{/*@bgen(jjtree) Field */
  try {
/*@egen*/  <FIELD>name = <IDENTIFIER><COLON>type = TypeSpecifier()<ASSIGN>value = <STRING_LITERAL><SEMICOLON>/*@bgen(jjtree)*/
                                                                                                    {
                                                                                                      jjtree.closeNodeScope(jjtn000, true);
                                                                                                      jjtc000 = false;
                                                                                                    }
/*@egen*/{    Field field = new Field();    field.setName(name.image);    field.setType(type.image);    field.setValue(value.image.replace("\"", ""));    jjtn000.jjtSetValue(field);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}SimpleNode Reader():{/*@bgen(jjtree) Reader */
  SimpleNode jjtn000 = new SimpleNode(JJTREADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  Token type;  Token ds;  Token map;  Token call;  Token outputScheme;  SimpleNode field;  SimpleNode property;  DataReader dataReader = new DataReader();}{/*@bgen(jjtree) Reader */
  try {
/*@egen*/  <READER>t = <IDENTIFIER><LBRACE>(property = Property(){    dataReader.getProperties().add((Property)property.jjtGetValue());  }  )*<TYPE><ASSIGN>type = <STRING_LITERAL><SEMICOLON><DS><ASSIGN>ds = <STRING_LITERAL><SEMICOLON><MAP><ASSIGN>map = <STRING_LITERAL><SEMICOLON><OUTPUTSCHEME><ASSIGN>outputScheme = <STRING_LITERAL><SEMICOLON>(<CALL><ASSIGN>call = <STRING_LITERAL><SEMICOLON>{    dataReader.getCalleds().add(call.image.replace("\"", ""));  }  )*(field = Field(){    dataReader.getFields().add((Field)field.jjtGetValue());  }  )*<RBRACE>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{    dataReader.setName(t.image);    dataReader.setType(type.image.replace("\"", ""));    dataReader.setDataSource(ds.image.replace("\"", ""));    dataReader.setMap(map.image.replace("\"", ""));    dataReader.setOutputScheme(outputScheme.image.replace("\"", ""));    jjtn000.jjtSetValue(dataReader);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}SimpleNode Transformer():{/*@bgen(jjtree) Transformer */
  SimpleNode jjtn000 = new SimpleNode(JJTTRANSFORMER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  Token type;  Token outputScheme;  Token call;  SimpleNode field;  SimpleNode property;  Transformer transformer = new Transformer();}{/*@bgen(jjtree) Transformer */
  try {
/*@egen*/  <TRANSFORMER>t = <IDENTIFIER><LBRACE>(property = Property(){    transformer.getProperties().add((Property)property.jjtGetValue());  }  )*<TYPE><ASSIGN>type = <STRING_LITERAL><SEMICOLON><OUTPUTSCHEME><ASSIGN>outputScheme = <STRING_LITERAL><SEMICOLON>(<CALL><ASSIGN>call = <STRING_LITERAL><SEMICOLON>{    transformer.getCalleds().add(call.image.replace("\"", ""));  }  )*(field = Field(){    transformer.getFields().add((Field)field.jjtGetValue());  }  )*<RBRACE>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{    transformer.setName(t.image);    transformer.setOutputScheme(outputScheme.image.replace("\"", ""));    transformer.setType(type.image.replace("\"", ""));    jjtn000.jjtSetValue(transformer);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}SimpleNode Checker():{/*@bgen(jjtree) Checker */
  SimpleNode jjtn000 = new SimpleNode(JJTCHECKER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  Token type;  Token condition;  SimpleNode property;  Checker checker = new Checker();}{/*@bgen(jjtree) Checker */
  try {
/*@egen*/  <CHECKER>t = <IDENTIFIER><LBRACE>(property = Property(){    checker.getProperties().add((Property)property.jjtGetValue());  }  )*<TYPE><ASSIGN>type = <STRING_LITERAL><SEMICOLON><CONDITION><ASSIGN>condition = <STRING_LITERAL><SEMICOLON><RBRACE>/*@bgen(jjtree)*/
                                                                                                                      {
                                                                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                                                                        jjtc000 = false;
                                                                                                                      }
/*@egen*/{    checker.setName(t.image);    checker.setType(type.image.replace("\"", ""));    checker.setCondition(condition.image.replace("\"", ""));    jjtn000.jjtSetValue(checker);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}SimpleNode Filter():{/*@bgen(jjtree) Filter */
  SimpleNode jjtn000 = new SimpleNode(JJTFILTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  Token type;  Token outputScheme;  Token condition;  Token call;  SimpleNode field;  SimpleNode property;  Filter filter = new Filter();}{/*@bgen(jjtree) Filter */
  try {
/*@egen*/  <FILTER>t = <IDENTIFIER><LBRACE>(property = Property(){    filter.getProperties().add((Property)property.jjtGetValue());  }  )*<TYPE><ASSIGN>type = <STRING_LITERAL><SEMICOLON><CONDITION><ASSIGN>condition = <STRING_LITERAL><SEMICOLON><OUTPUTSCHEME><ASSIGN>outputScheme = <STRING_LITERAL><SEMICOLON>(<CALL><ASSIGN>call = <STRING_LITERAL><SEMICOLON>{    filter.getCalleds().add(call.image.replace("\"", ""));  }  )*(field = Field(){    filter.getFields().add((Field)field.jjtGetValue());  }  )*<RBRACE>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{    filter.setName(t.image);    filter.setOutputScheme(outputScheme.image.replace("\"", ""));    filter.setType(type.image.replace("\"", ""));    filter.setCondition(condition.image.replace("\"", ""));    jjtn000.jjtSetValue(filter);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}SimpleNode TransactonType():{/*@bgen(jjtree) TransactonType */
  SimpleNode jjtn000 = new SimpleNode(JJTTRANSACTONTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  Token type;  Token outputScheme;  Token value;  Token call;  SimpleNode field;  SimpleNode property;  TransactonType transactonType = new TransactonType();}{/*@bgen(jjtree) TransactonType */
  try {
/*@egen*/  <TRANSACTIONTYPE>t = <IDENTIFIER><LBRACE>(property = Property(){    transactonType.getProperties().add((Property)property.jjtGetValue());  }  )*<TYPE><ASSIGN>type = <STRING_LITERAL><SEMICOLON><VALUE><ASSIGN>value = <STRING_LITERAL><SEMICOLON><OUTPUTSCHEME><ASSIGN>outputScheme = <STRING_LITERAL><SEMICOLON>(<CALL><ASSIGN>call = <STRING_LITERAL><SEMICOLON>{    transactonType.getCalleds().add(call.image.replace("\"", ""));  }  )*(field = Field(){    transactonType.getFields().add((Field)field.jjtGetValue());  }  )*<RBRACE>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{    transactonType.setName(t.image);    transactonType.setOutputScheme(outputScheme.image.replace("\"", ""));    transactonType.setType(type.image.replace("\"", ""));    transactonType.setValue(value.image.replace("\"", ""));    jjtn000.jjtSetValue(transactonType);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}SimpleNode Writer():{/*@bgen(jjtree) Writer */
  SimpleNode jjtn000 = new SimpleNode(JJTWRITER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  Token type;  Token ds;  Token rootId;  Token fieldId;  Token fieldKeys;  Token call;  Token outputScheme;  SimpleNode field;  SimpleNode property;  DataWriter dataWriter = new DataWriter();}{/*@bgen(jjtree) Writer */
  try {
/*@egen*/  <WRITER>t = <IDENTIFIER><LBRACE>(property = Property(){    dataWriter.getProperties().add((Property)property.jjtGetValue());  }  )*<TYPE><ASSIGN>type = <STRING_LITERAL><SEMICOLON><DS><ASSIGN>ds = <STRING_LITERAL><SEMICOLON><ROOTID><ASSIGN>rootId = <STRING_LITERAL><SEMICOLON><FIELDID><ASSIGN>fieldId = <STRING_LITERAL><SEMICOLON><FIELDKEYS><ASSIGN>fieldKeys = <STRING_LITERAL><SEMICOLON><OUTPUTSCHEME><ASSIGN>outputScheme = <STRING_LITERAL><SEMICOLON>(<CALL><ASSIGN>call = <STRING_LITERAL><SEMICOLON>{    dataWriter.getCalleds().add(call.image.replace("\"", ""));  }  )*(field = Field(){    dataWriter.getFields().add((Field)field.jjtGetValue());  }  )*<RBRACE>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{    dataWriter.setName(t.image);    dataWriter.setType(type.image.replace("\"", ""));    dataWriter.setDataSource(ds.image.replace("\"", ""));    dataWriter.setOutputScheme(outputScheme.image.replace("\"", ""));    dataWriter.setRootId(rootId.image.replace("\"", ""));    dataWriter.setFieldId(fieldId.image.replace("\"", ""));    dataWriter.setFieldKeys(fieldKeys.image.replace("\"", ""));    jjtn000.jjtSetValue(dataWriter);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}SimpleNode DataSource():{/*@bgen(jjtree) DataSource */
  SimpleNode jjtn000 = new SimpleNode(JJTDATASOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token name;  Token type;  SimpleNode property;  DataSource dataSource = new DataSource();}{/*@bgen(jjtree) DataSource */
  try {
/*@egen*/  <DATASOURCE>name = <IDENTIFIER><LBRACE>(property = Property(){    dataSource.getProperties().add((Property)property.jjtGetValue());  }  )*<TYPE><ASSIGN>type = <STRING_LITERAL><SEMICOLON><RBRACE>/*@bgen(jjtree)*/
                                                            {
                                                              jjtree.closeNodeScope(jjtn000, true);
                                                              jjtc000 = false;
                                                            }
/*@egen*/{    dataSource.setName(name.image);    dataSource.setType(type.image.replace("\"", ""));    jjtn000.jjtSetValue(dataSource);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Token TypeSpecifier():{/*@bgen(jjtree) TypeSpecifier */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPESPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) TypeSpecifier */
  try {
/*@egen*/  (t = <VOID>  | t = <CHAR>  | t = <BOOLEAN>  | t = <INT>  | t = <LONG>  | t = <FLOAT>  | t = <DOUBLE>  | t = <SHORT>  | t = <BYTE>  | LOOKAHEAD({    isType(getToken(1).image)  }  )t = TypedefName())/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{    return t;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Token TypedefName():{/*@bgen(jjtree) TypedefName */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEDEFNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) TypedefName */
  try {
/*@egen*/  t = <IDENTIFIER>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{    return t;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Token Type():{/*@bgen(jjtree) Type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Type */
  try {
/*@egen*/  (LOOKAHEAD(2)t = ReferenceType()  | t = PrimitiveType())/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{    jjtn000.jjtSetValue(t.image.replace("\"", ""));    return t;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Token PrimitiveType():{/*@bgen(jjtree) PrimitiveType */
  SimpleNode jjtn000 = new SimpleNode(JJTPRIMITIVETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) PrimitiveType */
  try {
/*@egen*/  (t = "boolean"  | t = "char"  | t = "byte"  | t = "short"  | t = "int"  | t = "long"  | t = "float"  | t = "double")/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{    jjtn000.jjtSetValue(t.image.replace("\"", ""));    return t;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Token ReferenceType():{/*@bgen(jjtree) ReferenceType */
  SimpleNode jjtn000 = new SimpleNode(JJTREFERENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) ReferenceType */
  try {
/*@egen*/  (t = PrimitiveType()(LOOKAHEAD(2)"[""]")+  | (t = ClassOrInterfaceType())(LOOKAHEAD(2)"[""]")*)/*@bgen(jjtree)*/
                                                      {
                                                        jjtree.closeNodeScope(jjtn000, true);
                                                        jjtc000 = false;
                                                      }
/*@egen*/{    jjtn000.jjtSetValue(t.image.replace("\"", ""));    return t;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Token ClassOrInterfaceType():{/*@bgen(jjtree) ClassOrInterfaceType */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSORINTERFACETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) ClassOrInterfaceType */
  try {
/*@egen*/  t = <IDENTIFIER>{    jjtn000.jjtSetValue(t.image.replace("\"", ""));    return t;  }  [LOOKAHEAD(2)TypeArguments()](LOOKAHEAD(2)"."<IDENTIFIER>[LOOKAHEAD(2)TypeArguments()])*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TypeArguments():{/*@bgen(jjtree) TypeArguments */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TypeArguments */
  try {
/*@egen*/  "<"TypeArgument()(","TypeArgument())*">"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TypeArgument():{/*@bgen(jjtree) TypeArgument */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TypeArgument */
  try {
/*@egen*/  ReferenceType()  | "?"[WildcardBounds()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void WildcardBounds():{/*@bgen(jjtree) WildcardBounds */
  SimpleNode jjtn000 = new SimpleNode(JJTWILDCARDBOUNDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) WildcardBounds */
  try {
/*@egen*/  "extends"ReferenceType()  | "super"ReferenceType()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TypeBound():{/*@bgen(jjtree) TypeBound */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEBOUND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TypeBound */
  try {
/*@egen*/  "extends"ClassOrInterfaceType()("&"ClassOrInterfaceType())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//  Method --------------------------------------------------------Function MethodDeclaration():{/*@bgen(jjtree) MethodDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Function fun = new Function();  Token block = null;  Token name;  Token resultType;  List<FunctionParameter>params;}{/*@bgen(jjtree) MethodDeclaration */
try {
/*@egen*/  // Modifiers already matched in the caller!<FUNCTION>name = <IDENTIFIER>{    fun.setName(name.image.replace("\"", ""));  }  params = FormalParameters()":"resultType = ResultType(){    fun.setReturnType(resultType.image.replace("\"", ""));  }  <LBRACE>[block = <IDENTIFIER>]<RBRACE>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/{    if (block != null){      fun.setBlock(block.image.replace("\"", ""));    }    fun.setParametrs(params);    jjtn000.jjtSetValue(fun);    return fun;  }/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/}List<FunctionParameter>FormalParameters():{/*@bgen(jjtree) FormalParameters */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMALPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  List<FunctionParameter>params = new ArrayList<FunctionParameter>();  FunctionParameter param;}{/*@bgen(jjtree) FormalParameters */
  try {
/*@egen*/  ("("[param = FormalParameter(){    params.add(param);  }  (","param = FormalParameter(){    params.add(param);  }  )*]")")/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/{    jjtn000.jjtSetValue(params);    return params;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}FunctionParameter FormalParameter():{/*@bgen(jjtree) FormalParameter */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMALPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  FunctionParameter param = new FunctionParameter();  Token name;  Token type;}{/*@bgen(jjtree) FormalParameter */
  try {
/*@egen*/  (type = Type()name = <IDENTIFIER>)/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/{    param.setName(name.image.replace("\"", ""));    param.setType(type.image.replace("\"", ""));    jjtn000.jjtSetValue(param);    return param;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Token ResultType():{/*@bgen(jjtree) ResultType */
  SimpleNode jjtn000 = new SimpleNode(JJTRESULTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) ResultType */
  try {
/*@egen*/  (t = "void"  | t = Type())/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{    jjtn000.jjtSetValue(t.image.replace("\"", ""));    return t;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}