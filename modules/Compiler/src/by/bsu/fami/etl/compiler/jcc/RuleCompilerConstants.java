/* Generated By:JJTree&JavaCC: Do not edit this line. RuleCompilerConstants.java */
package by.bsu.fami.etl.compiler.jcc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface RuleCompilerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 10;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 11;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 12;
  /** RegularExpression Id. */
  int RULE = 14;
  /** RegularExpression Id. */
  int WRITER = 15;
  /** RegularExpression Id. */
  int TYPE = 16;
  /** RegularExpression Id. */
  int DS = 17;
  /** RegularExpression Id. */
  int MAP = 18;
  /** RegularExpression Id. */
  int OUTPUTSCHEME = 19;
  /** RegularExpression Id. */
  int READER = 20;
  /** RegularExpression Id. */
  int DATASOURCE = 21;
  /** RegularExpression Id. */
  int TRANSFORMER = 22;
  /** RegularExpression Id. */
  int CALL = 23;
  /** RegularExpression Id. */
  int PROPERTY = 24;
  /** RegularExpression Id. */
  int FIELD = 25;
  /** RegularExpression Id. */
  int ROOTID = 26;
  /** RegularExpression Id. */
  int FIELDID = 27;
  /** RegularExpression Id. */
  int FIELDKEYS = 28;
  /** RegularExpression Id. */
  int FILTER = 29;
  /** RegularExpression Id. */
  int CHECKER = 30;
  /** RegularExpression Id. */
  int CONDITION = 31;
  /** RegularExpression Id. */
  int TRANSACTIONTYPE = 32;
  /** RegularExpression Id. */
  int FUNCTION = 33;
  /** RegularExpression Id. */
  int VALUE = 34;
  /** RegularExpression Id. */
  int DOUBLE = 35;
  /** RegularExpression Id. */
  int SHORT = 36;
  /** RegularExpression Id. */
  int BYTE = 37;
  /** RegularExpression Id. */
  int FLOAT = 38;
  /** RegularExpression Id. */
  int BOOLEAN = 39;
  /** RegularExpression Id. */
  int LONG = 40;
  /** RegularExpression Id. */
  int VOID = 41;
  /** RegularExpression Id. */
  int CHAR = 42;
  /** RegularExpression Id. */
  int INT = 43;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 44;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 45;
  /** RegularExpression Id. */
  int HEX_LITERAL = 46;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 47;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 48;
  /** RegularExpression Id. */
  int EXPONENT = 49;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 50;
  /** RegularExpression Id. */
  int STRING_LITERAL = 51;
  /** RegularExpression Id. */
  int IDENTIFIER = 52;
  /** RegularExpression Id. */
  int LETTER = 53;
  /** RegularExpression Id. */
  int DIGIT = 54;
  /** RegularExpression Id. */
  int LPAREN = 55;
  /** RegularExpression Id. */
  int RPAREN = 56;
  /** RegularExpression Id. */
  int LBRACE = 57;
  /** RegularExpression Id. */
  int RBRACE = 58;
  /** RegularExpression Id. */
  int LBRACKET = 59;
  /** RegularExpression Id. */
  int RBRACKET = 60;
  /** RegularExpression Id. */
  int SEMICOLON = 61;
  /** RegularExpression Id. */
  int COMMA = 62;
  /** RegularExpression Id. */
  int DOT = 63;
  /** RegularExpression Id. */
  int AT = 64;
  /** RegularExpression Id. */
  int ASSIGN = 65;
  /** RegularExpression Id. */
  int LT = 66;
  /** RegularExpression Id. */
  int BANG = 67;
  /** RegularExpression Id. */
  int TILDE = 68;
  /** RegularExpression Id. */
  int HOOK = 69;
  /** RegularExpression Id. */
  int COLON = 70;
  /** RegularExpression Id. */
  int EQ = 71;
  /** RegularExpression Id. */
  int LE = 72;
  /** RegularExpression Id. */
  int GE = 73;
  /** RegularExpression Id. */
  int NE = 74;
  /** RegularExpression Id. */
  int SC_OR = 75;
  /** RegularExpression Id. */
  int SC_AND = 76;
  /** RegularExpression Id. */
  int INCR = 77;
  /** RegularExpression Id. */
  int DECR = 78;
  /** RegularExpression Id. */
  int PLUS = 79;
  /** RegularExpression Id. */
  int MINUS = 80;
  /** RegularExpression Id. */
  int STAR = 81;
  /** RegularExpression Id. */
  int SLASH = 82;
  /** RegularExpression Id. */
  int BIT_AND = 83;
  /** RegularExpression Id. */
  int BIT_OR = 84;
  /** RegularExpression Id. */
  int XOR = 85;
  /** RegularExpression Id. */
  int REM = 86;
  /** RegularExpression Id. */
  int LSHIFT = 87;
  /** RegularExpression Id. */
  int PLUSASSIGN = 88;
  /** RegularExpression Id. */
  int MINUSASSIGN = 89;
  /** RegularExpression Id. */
  int STARASSIGN = 90;
  /** RegularExpression Id. */
  int SLASHASSIGN = 91;
  /** RegularExpression Id. */
  int ANDASSIGN = 92;
  /** RegularExpression Id. */
  int ORASSIGN = 93;
  /** RegularExpression Id. */
  int XORASSIGN = 94;
  /** RegularExpression Id. */
  int REMASSIGN = 95;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 96;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 97;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 98;
  /** RegularExpression Id. */
  int ELLIPSIS = 99;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"\\f\"",
    "\"//\"",
    "<token of kind 8>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 13>",
    "\"rule\"",
    "\"writer\"",
    "\"type\"",
    "\"ds\"",
    "\"map\"",
    "\"outputscheme\"",
    "\"reader\"",
    "\"datasource\"",
    "\"transformer\"",
    "\"call\"",
    "\"property\"",
    "\"field\"",
    "\"rootId\"",
    "\"fieldId\"",
    "\"fieldKey\"",
    "\"filter\"",
    "\"checker\"",
    "\"condition\"",
    "\"transactiontype\"",
    "\"function\"",
    "\"value\"",
    "\"double\"",
    "\"short\"",
    "\"byte\"",
    "\"float\"",
    "\"boolean\"",
    "\"long\"",
    "\"void\"",
    "\"char\"",
    "\"int\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"...\"",
    "\">\"",
    "\"extends\"",
    "\"super\"",
  };

}
